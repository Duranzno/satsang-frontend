/* Generated by restful-react */

import React from "react"
import {
  Get,
  GetProps,
  useGet,
  UseGetProps,
  Mutate,
  MutateProps,
  useMutate,
  UseMutateProps,
} from "restful-react"
export interface Category {
  id?: number
  name?: string
}

export interface UserLoginInput {
  email?: string
  password?: string
}

export type UserSignupInput = UserLoginInput & {
  name?: string
}

export type User = UserSignupInput & {
  id?: number
}

export interface EventInput {
  online?: boolean
  title: string
  description?: string
  datetime: string
  duration: number
}

export type Event = EventInput & {
  id?: number
  userId?: number
  user?: User[]
  categoryId?: number
  category?: Category[]
  locationId?: number
  location?: Location
  photoUrls: string[]
  categories?: Category[]
}

export interface Location {
  code?: number
  type?: string
  message?: string
}

export interface ApiResponse {
  code?: number
  type?: string
  message?: string
}

/**
 * Event object that needs to be added to the store
 */
export type EventRequestBody = EventInput

export type UserLoginInputRequestBody = UserLoginInput

export type UserSignupInputRequestBody = UserSignupInput

export type GetAllEventsProps = Omit<GetProps<Event[], unknown, void, void>, "path">

/**
 * Get All Events
 *
 * Get All Events
 */
export const GetAllEvents = (props: GetAllEventsProps) => (
  <Get<Event[], unknown, void, void> path={`http://localhost:3001/api/event`} {...props} />
)

export type UseGetAllEventsProps = Omit<UseGetProps<Event[], unknown, void, void>, "path">

/**
 * Get All Events
 *
 * Get All Events
 */
export const useGetAllEvents = (props: UseGetAllEventsProps) =>
  useGet<Event[], unknown, void, void>(`http://localhost:3001/api/event`, props)

export type AddEventProps = Omit<
  MutateProps<Event, void, void, EventRequestBody, void>,
  "path" | "verb"
>

/**
 * Add a new event to the store
 */
export const AddEvent = (props: AddEventProps) => (
  <Mutate<Event, void, void, EventRequestBody, void> verb="POST" path={`http://localhost:3001/api/event`} {...props} />
)

export type UseAddEventProps = Omit<
  UseMutateProps<Event, void, void, EventRequestBody, void>,
  "path" | "verb"
>

/**
 * Add a new event to the store
 */
export const useAddEvent = (props: UseAddEventProps) =>
  useMutate<Event, void, void, EventRequestBody, void>("POST", `http://localhost:3001/api/event`, props)

export interface GetEventByIdPathParams {
  /**
   * This will get the event info by its id
   */
  id: string
}

export type GetEventByIdProps = Omit<
  GetProps<string, unknown, void, GetEventByIdPathParams>,
  "path"
> &
  GetEventByIdPathParams

/**
 * Get Event by ID
 *
 * Get Event by ID
 */
export const GetEventById = ({ id, ...props }: GetEventByIdProps) => (
  <Get<string, unknown, void, GetEventByIdPathParams> path={`/api/event/${id}`} {...props} />
)

export type UseGetEventByIdProps = Omit<
  UseGetProps<string, unknown, void, GetEventByIdPathParams>,
  "path"
> &
  GetEventByIdPathParams

/**
 * Get Event by ID
 *
 * Get Event by ID
 */
export const useGetEventById = ({ id, ...props }: UseGetEventByIdProps) =>
  useGet<string, unknown, void, GetEventByIdPathParams>(
    (paramsInPath: GetEventByIdPathParams) => `/api/event/${paramsInPath.id}`,
    { pathParams: { id }, ...props }
  )

export interface UpdateEventPathParams {
  /**
   * This will get the event info by its id
   */
  id: string
}

export type UpdateEventProps = Omit<
  MutateProps<void, void, void, EventRequestBody, UpdateEventPathParams>,
  "path" | "verb"
> &
  UpdateEventPathParams

/**
 * Update an existing event
 *
 * Update an existing event
 */
export const UpdateEvent = ({ id, ...props }: UpdateEventProps) => (
  <Mutate<void, void, void, EventRequestBody, UpdateEventPathParams>
    verb="PUT"
    path={`/api/event/${id}`}
    {...props}
  />
)

export type UseUpdateEventProps = Omit<
  UseMutateProps<void, void, void, EventRequestBody, UpdateEventPathParams>,
  "path" | "verb"
> &
  UpdateEventPathParams

/**
 * Update an existing event
 *
 * Update an existing event
 */
export const useUpdateEvent = ({ id, ...props }: UseUpdateEventProps) =>
  useMutate<void, void, void, EventRequestBody, UpdateEventPathParams>(
    "PUT",
    (paramsInPath: UpdateEventPathParams) => `/api/event/${paramsInPath.id}`,
    { pathParams: { id }, ...props }
  )

export type DeleteEventProps = Omit<MutateProps<void, void, void, string, void>, "path" | "verb">

/**
 * Delete an existing event
 *
 * Delete an existing event
 */
export const DeleteEvent = (props: DeleteEventProps) => (
  <Mutate<void, void, void, string, void> verb="DELETE" path={`/api/event`} {...props} />
)

export type UseDeleteEventProps = Omit<
  UseMutateProps<void, void, void, string, void>,
  "path" | "verb"
>

/**
 * Delete an existing event
 *
 * Delete an existing event
 */
export const useDeleteEvent = (props: UseDeleteEventProps) =>
  useMutate<void, void, void, string, void>("DELETE", `/api/event`, { ...props })

export type CreateUserProps = Omit<
  MutateProps<void, void, void, UserSignupInput, void>,
  "path" | "verb"
>

/**
 * Create new user with mail/password
 */
export const CreateUser = (props: CreateUserProps) => (
  <Mutate<void, void, void, UserSignupInput, void>
    verb="POST"
    path={`/api/auth/signup`}
    {...props}
  />
)

export type UseCreateUserProps = Omit<
  UseMutateProps<void, void, void, UserSignupInput, void>,
  "path" | "verb"
>

/**
 * Create new user with mail/password
 */
export const useCreateUser = (props: UseCreateUserProps) =>
  useMutate<void, void, void, UserSignupInput, void>("POST", `/api/auth/signup`, props)

export type LoginUserProps = Omit<
  MutateProps<void, void, void, UserLoginInput, void>,
  "path" | "verb"
>

/**
 * Post endpoint for login user
 */
export const LoginUser = (props: LoginUserProps) => (
  <Mutate<void, void, void, UserLoginInput, void> verb="POST" path={`/api/auth/login`} {...props} />
)

export type UseLoginUserProps = Omit<
  UseMutateProps<void, void, void, UserLoginInput, void>,
  "path" | "verb"
>

/**
 * Post endpoint for login user
 */
export const useLoginUser = (props: UseLoginUserProps) =>
  useMutate<void, void, void, UserLoginInput, void>("POST", `/api/auth/login`, props)

export type LogoutProps = Omit<GetProps<User, void, void, void>, "path">

/**
 * Get Current User Using Auth Data
 */
export const Logout = (props: LogoutProps) => (
  <Get<User, void, void, void> path={`/api/auth/current`} {...props} />
)

export type UseLogoutProps = Omit<UseGetProps<User, void, void, void>, "path">

/**
 * Get Current User Using Auth Data
 */
export const useLogout = (props: UseLogoutProps) =>
  useGet<User, void, void, void>(`/api/auth/current`, props)

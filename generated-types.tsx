/* Generated by restful-react */

import React from "react";
import { Get, GetProps, useGet, UseGetProps, Mutate, MutateProps, useMutate, UseMutateProps } from "restful-react";
export interface EventInput {
  online?: boolean;
  title: string;
  description?: string;
  datetime: string;
  duration: number;
}

export interface Category {
  id?: number;
  name?: string;
}

export interface User {
  id?: number;
  name?: string;
  email?: string;
  password?: string;
}

export interface Event {
  id?: number;
  userId?: number;
  user?: User[];
  categoryId?: number;
  category?: Category[];
  locationId?: number;
  location?: Location;
  name: string;
  description?: string;
  photoUrls: string[];
  categories?: Category[];
}

export interface Location {
  code?: number;
  type?: string;
  message?: string;
}

export interface ApiResponse {
  code?: number;
  type?: string;
  message?: string;
}

/**
 * Event object that needs to be added to the store
 */
export type EventRequestBody = EventInput;

export type GetAllEventsProps = Omit<GetProps<Event[], unknown, void, void>, "path">;

/**
 * Get All Events
 * 
 * Get All Events
 */
export const GetAllEvents = (props: GetAllEventsProps) => (
  <Get<Event[], unknown, void, void>
    path={`/api/event`}
    
    {...props}
  />
);

export type UseGetAllEventsProps = Omit<UseGetProps<Event[], unknown, void, void>, "path">;

/**
 * Get All Events
 * 
 * Get All Events
 */
export const useGetAllEvents = (props: UseGetAllEventsProps) => useGet<Event[], unknown, void, void>(`/api/event`, props);


export type AddEventProps = Omit<MutateProps<Event, void, void, EventRequestBody, void>, "path" | "verb">;

/**
 * Add a new event to the store
 */
export const AddEvent = (props: AddEventProps) => (
  <Mutate<Event, void, void, EventRequestBody, void>
    verb="POST"
    path={`/api/event`}
    
    {...props}
  />
);

export type UseAddEventProps = Omit<UseMutateProps<Event, void, void, EventRequestBody, void>, "path" | "verb">;

/**
 * Add a new event to the store
 */
export const useAddEvent = (props: UseAddEventProps) => useMutate<Event, void, void, EventRequestBody, void>("POST", `/api/event`, props);


export interface GetEventByIdPathParams {
  /**
   * This will get the event info by its id
   */
  id: string
}

export type GetEventByIdProps = Omit<GetProps<string, unknown, void, GetEventByIdPathParams>, "path"> & GetEventByIdPathParams;

/**
 * Get Event by ID
 * 
 * Get Event by ID
 */
export const GetEventById = ({id, ...props}: GetEventByIdProps) => (
  <Get<string, unknown, void, GetEventByIdPathParams>
    path={`/api/event/${id}`}
    
    {...props}
  />
);

export type UseGetEventByIdProps = Omit<UseGetProps<string, unknown, void, GetEventByIdPathParams>, "path"> & GetEventByIdPathParams;

/**
 * Get Event by ID
 * 
 * Get Event by ID
 */
export const useGetEventById = ({id, ...props}: UseGetEventByIdProps) => useGet<string, unknown, void, GetEventByIdPathParams>((paramsInPath: GetEventByIdPathParams) => `/api/event/${paramsInPath.id}`, {  pathParams: { id }, ...props });


export interface UpdateEventPathParams {
  /**
   * This will get the event info by its id
   */
  id: string
}

export type UpdateEventProps = Omit<MutateProps<void, void, void, EventRequestBody, UpdateEventPathParams>, "path" | "verb"> & UpdateEventPathParams;

/**
 * Update an existing event
 * 
 * Update an existing event
 */
export const UpdateEvent = ({id, ...props}: UpdateEventProps) => (
  <Mutate<void, void, void, EventRequestBody, UpdateEventPathParams>
    verb="PUT"
    path={`/api/event/${id}`}
    
    {...props}
  />
);

export type UseUpdateEventProps = Omit<UseMutateProps<void, void, void, EventRequestBody, UpdateEventPathParams>, "path" | "verb"> & UpdateEventPathParams;

/**
 * Update an existing event
 * 
 * Update an existing event
 */
export const useUpdateEvent = ({id, ...props}: UseUpdateEventProps) => useMutate<void, void, void, EventRequestBody, UpdateEventPathParams>("PUT", (paramsInPath: UpdateEventPathParams) => `/api/event/${paramsInPath.id}`, {  pathParams: { id }, ...props });


export type DeleteEventProps = Omit<MutateProps<void, void, void, string, void>, "path" | "verb">;

/**
 * Delete an existing event
 * 
 * Delete an existing event
 */
export const DeleteEvent = (props: DeleteEventProps) => (
  <Mutate<void, void, void, string, void>
    verb="DELETE"
    path={`/api/event`}
    
    {...props}
  />
);

export type UseDeleteEventProps = Omit<UseMutateProps<void, void, void, string, void>, "path" | "verb">;

/**
 * Delete an existing event
 * 
 * Delete an existing event
 */
export const useDeleteEvent = (props: UseDeleteEventProps) => useMutate<void, void, void, string, void>("DELETE", `/api/event`, {   ...props });

